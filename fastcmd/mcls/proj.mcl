@name proj

@define block modules.rule_block
@define block modules.repeat_block
@define block modules.mod_block
@define expression modules.pass_expression
@define expression modules.spawn_generator
@define expression modules.nbt_expression
@define expression modules.tp_expression
@define block modules.store_block
@define block modules.template_block
@define block modules.float_block


chat sys = ["[SYSTEM] -> "]
selector ints = @e[type=minecraft:interaction]
ints.addTag(ownedInt)
repeat i(1, 5)
    var uuid_%i%
    var interaction_%i%
    var attack_%i%
    nbt nbt_uuid_%i% = attack.player[%i-1%]

template clearInteraction
    execute data merge entity @s {attack:{player:[0, 0, 0, 0], timestamp:1f}, interaction:{player:[0, 0, 0, 0], timestamp:1f}}

template initInteration
    clearInteraction.insert()
    execute data modify entity @s attack.player set from entity @p UUID
    execute data modify entity @s Invisible set value 1b
    execute data modify entity @s height set value 4f
    execute data modify entity @s width set value 2f
    repeat i(1, 5)
        uuid_%i%.store(data get entity @s attack.player[%i-1%])
    self.ownedInt = True


var owner_attack
var owner_interaction
var success_tp
var itemId
var lifetime

func init_int() -> @e[type=minecraft:interaction]
    initInteration.insert()

selector arrows = @e[type=minecraft:arrow]
selector inGroundArrows = @e[type=minecraft:arrow, nbt={inGround:1b}]

selector grenades = arrows
grenades.addTag(grenade)

func grenade_init() -> arrows
    self.grenade = True
    lifetime = 100
    customDeath = True

rule grenadeBehavior(grenade) -> grenades
    lifetime -= 1
    if lifetime < 0
        execute kill @s

template attack_handlers
    itemId.store(data get entity Cyrsia SelectedItem.tag.mod.id)
    if itemId == 1
        mod at @s
            spawn minecraft:arrow grenade_init


template interaction_handlers
    pass

rule forInts(ownedInt) -> ints
    # Обработка ПКМ и ЛКМ
    repeat for data in ['attack', 'interaction']
        owner_%data% = 0
        repeat i(1, 5)
            %data%_%i%.store(data get entity @s %data%.player[%i-1%])
            if uuid_%i% == %data%_%i%
                owner_%data% += 1
        if owner_%data% == 4
            owner_%data% = True

    # Телепортация к владельцу
    repeat i(1, 5)
        nbt_uuid_%i%.storeInt(uuid_%i%)
    store success to success_tp
        mod at @s on attacker
            tp ints[sort=nearest, limit=1], @s
    if success_tp == False
        execute kill @s

    # Логика взаимодействия
    repeat for type in ['attack', 'interaction']
        if owner_%type%
            mod at @s on attacker
                %type%_handlers.insert()

    # Чистка значений
    clearInteraction.insert()


input test(num) -> @a
    mod at @s
        spawn minecraft:interaction init_int
input clear(num) -> @a
    mod at @s
        execute kill @e[type=minecraft:interaction]
input give_me(num) -> @a
    if num == 1
        execute give @s stick{mod:{id:1}}

float temp_float
input round_test(num) -> @a
    temp_float = num
    temp_float.sin()
    sys.log(@a, [temp_float])