@name intest

@define block modules.mod_block
@define expression modules.spawn_generator
@define expression modules.nbt_expression
@define expression modules.pass_expression
@define expression modules.tp_expression
@define block modules.rule_block
@define block modules.repeat_block

selector ints = @e[type=minecraft:interaction]
ints.addTag(ownedInt)
selector arrows = @e[type=minecraft:interaction]
arrows.addTag(oarrow)
selector gases = @e[type=minecraft:armor_stand]
gases.addTag(ogas)

chat rock = ["<INT> "]

repeat i(1, 5)
    var uuid_%i%
    var interact_%i%
    nbt nbt_uuid_%i% = attack.player[%i-1%]
    nbt nbt_interact_%i% = interaction.player[%i-1%]

var state
var is_owner
var interacting

var arrow_live

func arrow_init() -> @e[type=minecraft:interaction]
    mod at @s rotated as @p
        execute tp ^ ^ ^2
        execute data modify entity @s Invisible set value 1b
        execute data modify entity @s NoGravity set value 1b
        arrow_live = 5
    self.oarrow = True

var fire_duration
rule arrows(oarrow) -> arrows
    mod at @s
        execute tp ~ ~0.3 ~
        if arrow_live > 3
            execute tp ^ ^ ^1
        else
            execute tp ^ ^ ^0.5
        arrow_live -= 1
        execute particle minecraft:flame ~ ~ ~ 0.1 0.1 0.1 0 5 force

        mod as @e[distance=..2]
            execute damage @s 2 minecraft:in_fire
            self.onFire = True
            fire_duration = 50

    if arrow_live < 0
        execute kill @s


rule firing(onFire) -> @e
    fire_duration -= 1
    execute damage @s 0.5 minecraft:in_fire
    if fire_duration < 0
        self.onFire = False


func init_int() -> @e[type=minecraft:interaction]
    execute data merge entity @s {attack:{player:[0, 0, 0, 0], timestamp:1f}}
    execute data modify entity @s attack.player set from entity @p UUID
    execute data modify entity @s Invisible set value 1b
    execute data modify entity @s height set value 2f
    execute data modify entity @s width set value 2f

    repeat i(1, 5)
        uuid_%i%.store(data get entity @s attack.player[%i-1%])

    self.ownedInt = True


var interact_time = 0
rule forInts(ownedInt) -> ints
    is_owner = False
    repeat i(1, 5)
        nbt_uuid_%i%.storeInt(uuid_%i%)
        interact_%i%.store(data get entity @s interaction.player[%i-1%])
        if uuid_%i% == interact_%i%
            is_owner = True

    execute data remove entity @s interaction

    interacting.store(data get entity @s interaction)
    mod at @s
        mod on attacker
            tp ints[sort=nearest, limit=1], @s
        if is_owner
            interact_time = 10

        if interact_time > 0
            interact_time -= 1
            spawn minecraft:interaction arrow_init

input test(num) -> @a
    mod at @s
        spawn minecraft:interaction init_int
input clear(num) -> @a
    mod at @s
        execute kill @e[type=minecraft:interaction]


input start_gas(num) -> @a
    self.gasSpawning = True
input stop_gas(num) -> @a
    self.gasSpawning = False

var gas_time
func gas_init() -> @e[type=minecraft:armor_stand]
    self.ogas = True
    execute data modify entity @s height set value 0.2f
    execute data modify entity @s width set value 0.2f
    execute data modify entity @s Invisible set value 1b
    gas_time = 100

rule gasSpawner(gasSpawning) -> @e
    mod at @s
        spawn minecraft:armor_stand gas_init

nbt x_vel = Motion[0]
nbt y_vel = Motion[1]
nbt z_vel = Motion[2]
var x_rnd
var y_rnd
var z_rnd
var gas_level

rule gasBehavior(ogas) -> gases
    if gas_time < 0
        execute kill @s
    mod at @s
        execute particle minecraft:squid_ink ~ ~ ~ 2 2 2 0 4
        mod as @e[distance=..2]
            gas_level += 1
    x_rnd.store(random value -7..7)
    y_rnd.store(random value -7..5)
    z_rnd.store(random value -7..7)
    x_vel.storeDouble(x_rnd, 0.1)
    y_vel.storeDouble(y_rnd, 0.1)
    z_vel.storeDouble(z_rnd, 0.1)
    gas_time -= 1

rule commonRule() -> @e
    if gas_level <= 0
        gas_level = 0
        return
    else
        gas_level -= 1

    if gas_level >= 1000
        execute damage @s 2 minecraft:generic

    if gas_level >= 1300
        gas_level = 1300
